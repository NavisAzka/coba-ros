// Generated by gencpp from file iris24/server2bs.msg
// DO NOT EDIT!


#ifndef IRIS24_MESSAGE_SERVER2BS_H
#define IRIS24_MESSAGE_SERVER2BS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iris24
{
template <class ContainerAllocator>
struct server2bs_
{
  typedef server2bs_<ContainerAllocator> Type;

  server2bs_()
    : angka(0)  {
    }
  server2bs_(const ContainerAllocator& _alloc)
    : angka(0)  {
  (void)_alloc;
    }



   typedef uint8_t _angka_type;
  _angka_type angka;





  typedef boost::shared_ptr< ::iris24::server2bs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iris24::server2bs_<ContainerAllocator> const> ConstPtr;

}; // struct server2bs_

typedef ::iris24::server2bs_<std::allocator<void> > server2bs;

typedef boost::shared_ptr< ::iris24::server2bs > server2bsPtr;
typedef boost::shared_ptr< ::iris24::server2bs const> server2bsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iris24::server2bs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iris24::server2bs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iris24::server2bs_<ContainerAllocator1> & lhs, const ::iris24::server2bs_<ContainerAllocator2> & rhs)
{
  return lhs.angka == rhs.angka;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iris24::server2bs_<ContainerAllocator1> & lhs, const ::iris24::server2bs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iris24

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iris24::server2bs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iris24::server2bs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iris24::server2bs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iris24::server2bs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iris24::server2bs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iris24::server2bs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iris24::server2bs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "265bbafc8b4e42052cff29ebcf353552";
  }

  static const char* value(const ::iris24::server2bs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x265bbafc8b4e4205ULL;
  static const uint64_t static_value2 = 0x2cff29ebcf353552ULL;
};

template<class ContainerAllocator>
struct DataType< ::iris24::server2bs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iris24/server2bs";
  }

  static const char* value(const ::iris24::server2bs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iris24::server2bs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 angka\n"
;
  }

  static const char* value(const ::iris24::server2bs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iris24::server2bs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angka);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct server2bs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iris24::server2bs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iris24::server2bs_<ContainerAllocator>& v)
  {
    s << indent << "angka: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.angka);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IRIS24_MESSAGE_SERVER2BS_H
